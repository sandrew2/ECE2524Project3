import random

def drawBoard(board):
    print('   |   |')
    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('   |   |')


def getPlayerLetter():
    print('Will you be x or o?')
    letter = input().lower()
    while letter != 'x' and letter != 'o':
        print('That was not a valid letter! Pick again')
        letter = input().lower()
    if letter == 'x':
        return ['x', 'o']
    else:
        return ['o', 'x']

def getPlayerMove(board, letter):
    print('Where will you move? (1-9)')
    move = ' '
    move = input()
    while move not in '1 2 3 4 5 6 7 8 9'.split() or not isValidMove(board, int(move)):
        print('That was not a valid move! Pick again')
        move = input()
    board[int(move)] = letter

def isValidMove(board, move):
    return (board[int(move)] == ' ')

def getComputerMove(board, completter, playerletter):
    moved = False
    validMoves = []
    for i in range(1, 10):
        if isValidMove(board, i):
            validMoves.append(i)
    for i in validMoves:
        tempBoard = peekBoard(board)
        tempBoard[i] == completter
        if checkWin(tempBoard, completter):
            board[i] = completter
            moved = True
    if moved == False:
        for i in validMoves:
            tempBoard = peekBoard(board)
            tempBoard[i] == playerletter
            if checkWin(tempBoard, playerletter):
                board[i] = completter
                moved = True
    if moved == False:
        for i in '1 3 7 9'.split():
            if i in validMoves:
                board[i] = completter
                moved = True
    if moved == False:
        if isValidMove(board, 5):
            board[5] = completter
            moved = True
    if moved == False:
        for i in '2 4 6 8'.split():
            if i in validMoves:
                board[i] = completter

def peekBoard(board):
    tempBoard = []
    for i in board:
        tempBoard.append(i)
    return tempBoard

def checkWin(board, letter):
    return ((board[1] == letter and (
    (board[2] == letter and board[3] == letter) or
    (board[4] == letter and board[7] == letter)))
    or (board[9] == letter and (
    (board[8] == letter and board[7] == letter) or
    (board[6] == letter and board[3] == letter)))
    or (board[5] == letter and (
    (board[1] == letter and board[9] == letter) or
    (board[7] == letter and board[3] == letter)or
    (board[4] == letter and board[6] == letter)or
    (board[2] == letter and board[8] == letter))))

def checkTie(board):
    for i in range(1,10):
        if isValidMove(board, i):
            return False
    return True


def playAgain():
     # This function returns True if the player wants to play again, otherwise it returns False.
    print('Do you want to play again? (yes or no)')
    return input().lower().startswith('y')


#====================
while True:
    theBoard = [' '] * 10
    playerletter, computerletter = getPlayerLetter()
    if playerletter == 'x':
        turn = 'player'
    else:
        turn = 'computer'
    gameIsPlaying = True

    while gameIsPlaying:
        if turn == 'player':
            drawBoard(theBoard)
            getPlayerMove(theBoard, playerletter)
            if checkWin(theBoard, playerletter):
                drawBoard(theBoard)
                print('win')
                gameIsPlaying = False
            else:
                if checkTie(theBoard):
                    drawBoard(theBoard)
                    print('Tie')
                    gameIsPlaying = False
                    break
                else:
                    turn = 'computer'
        if turn == 'computer':
            getComputerMove(theBoard, computerletter, playerletter)
            if checkWin(theBoard, computerletter):
                drawBoard(theBoard)
                print('lose')
                gameIsPlaying = False
            else:
                if checkTie(theBoard):
                    drawBoard(theBoard)
                    print('Tie')
                    gameIsPlaying = False
                    break
                else:
                    turn = 'player'
    if not playAgain():
        break
